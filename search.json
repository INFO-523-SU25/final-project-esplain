[
  {
    "objectID": "Scratch/project.html",
    "href": "Scratch/project.html",
    "title": "WNBA Referee Bias Analysis",
    "section": "",
    "text": "# For data handling\nimport os\nimport pandas as pd\nimport numpy as np\nimport sys\n\n# For clustering\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\n\n# For visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.decomposition import PCA\n\n\ndata_folder = \"../data\"\n\n# Load individual season data\nwnba_2022 = pd.read_csv(os.path.join(data_folder, \"wnba_2022.csv\"))\nwnba_2023 = pd.read_csv(os.path.join(data_folder, \"wnba_2023.csv\"))\nwnba_2024 = pd.read_csv(os.path.join(data_folder, \"wnba_2024.csv\"))\n\n# Combine all seasons into one dataset\nwnba_data = pd.concat([wnba_2022, wnba_2023, wnba_2024], ignore_index=True)\n\n# Add a year column for Time Actual that's in format ISO8601\nwnba_data['timeActual'] = pd.to_datetime(wnba_data['timeActual'], format='ISO8601')\n# Ensure 'timeActual' is in datetime format\nwnba_data['year'] = wnba_data['timeActual'].dt.year\n\n \n# Display basic information about the dataset\nprint(f\"Total records across all seasons: {len(wnba_data):,}\")\nprint(f\"Columns in dataset: {wnba_data.shape[1]}\")\nprint(f\"Dataset shape: {wnba_data.shape}\")\nprint(\"\\nDataset columns:\")\nprint(wnba_data.columns.tolist())\n\nTotal records across all seasons: 28,103\nColumns in dataset: 58\nDataset shape: (28103, 58)\n\nDataset columns:\n['actionNumber', 'clock', 'timeActual', 'period', 'periodType', 'actionType', 'subType', 'qualifiers', 'personId', 'x', 'y', 'possession', 'scoreHome', 'scoreAway', 'edited', 'orderNumber', 'xLegacy', 'yLegacy', 'isFieldGoal', 'side', 'description', 'personIdsFilter', 'teamId', 'teamTricode', 'descriptor', 'jumpBallRecoveredName', 'jumpBallRecoverdPersonId', 'playerName', 'playerNameI', 'jumpBallWonPlayerName', 'jumpBallWonPersonId', 'jumpBallLostPlayerName', 'jumpBallLostPersonId', 'shotDistance', 'shotResult', 'shotActionNumber', 'reboundTotal', 'reboundDefensiveTotal', 'reboundOffensiveTotal', 'pointsTotal', 'assistPlayerNameInitial', 'assistPersonId', 'assistTotal', 'turnoverTotal', 'stealPlayerName', 'stealPersonId', 'officialId', 'foulPersonalTotal', 'foulTechnicalTotal', 'foulDrawnPlayerName', 'foulDrawnPersonId', 'blockPlayerName', 'blockPersonId', 'gameId', 'isTargetScoreLastPeriod', 'area', 'areaDetail', 'year']\n\n\n\n\n# --------------------  Game Metadata Analysis\nprint(\"\\n1. Summary of the Game Data:\")\nprint(f\"Number of games: {wnba_data['gameId'].nunique()}\")\n# Convert timeActual to datetime with proper format handling\nwnba_data['timeActual'] = pd.to_datetime(wnba_data['timeActual'], format='ISO8601')\nmin_date = wnba_data['timeActual'].min().strftime('%B %Y')\nmax_date = wnba_data['timeActual'].max().strftime('%B %Y')\n\nprint(f\"Date range: {min_date} to {max_date}\")\nprint(f\"Number of teams: {wnba_data['teamTricode'].nunique()}\")\nprint(\"Teams:\", sorted(wnba_data['teamTricode'].dropna().unique()))\n\n\n#-------------------- Referee Assignment Analysis  \nprint(\"\\n2. Summary of the Referee Assignments:\")\nreferee_data = wnba_data[wnba_data['officialId'].notnull()]\n\n# Calculate the count of how many games have referee data\ngames_with_referee_data = referee_data['gameId'].nunique()\ntotal_games = wnba_data['gameId'].nunique()\n\nprint(f\"Games with referee data: {games_with_referee_data} out of {total_games} total games ({games_with_referee_data/total_games*100:.1f}%)\")\nprint(f\"Records with referee data: {len(referee_data):,} ({len(referee_data)/len(wnba_data)*100:.1f}%)\")\nprint(f\"Unique referees: {referee_data['officialId'].nunique()}\")\n\n# Referee assignments per game\nreferee_assignments = referee_data.groupby('gameId')['officialId'].nunique().reset_index()\nreferee_assignments.columns = ['gameId', 'num_referees']\nprint(f\"Average referees per game: {referee_assignments['num_referees'].mean():.2f}\")\n\n\n# Most active referees based on unique gameids\ntop_referees = referee_data.groupby('officialId')['gameId'].nunique().sort_values(ascending=False).head(10)\nprint(f\"\\nTop 10 Most Active Referees (by unique games):\")\nprint(top_referees)\n\n# Visualize of all referees by number of unique games\n\nall_referees = referee_data.groupby('officialId')['gameId'].nunique().sort_values(ascending=False)\nall_referees.index = all_referees.index.astype(str)\nplt.figure(figsize=(10, 6))\nsns.barplot(\n    x=all_referees.index, \n    y=all_referees.values\n)\nplt.xticks(rotation=45, ha='right')\nplt.title('Count of Unique Games per Referee', fontsize=14, fontweight='bold')\nplt.xlabel('Referee ID')\nplt.ylabel('Number of Unique Games')\nplt.tight_layout()\nplt.show()\n\n# -------------------- Game Outcomes Analysis\n\ngames_summary = wnba_data.groupby('gameId').agg({\n    'scoreHome': 'max',\n    'scoreAway': 'max',\n    'teamTricode': 'nunique',\n    'year': 'first'\n}).reset_index()\n\ngames_summary['point_differential'] = games_summary['scoreHome'] - games_summary['scoreAway']\ngames_summary['home_win'] = games_summary['point_differential'] &gt; 0\n\n# Analyzing by year the game outcomes\nyearly_outcomes = games_summary.groupby('year').agg({\n    'gameId': 'count',\n    'home_win': ['sum', 'mean'],\n    'point_differential': 'mean'\n}).round(0)\n\nprint(\"\\nOutcomes by Season:\")\nfor year in yearly_outcomes.index:\n    games_count = yearly_outcomes.loc[year, ('gameId', 'count')]\n    home_wins = yearly_outcomes.loc[year, ('home_win', 'sum')]\n    home_win_pct = yearly_outcomes.loc[year, ('home_win', 'mean')] * 100\n    avg_diff = yearly_outcomes.loc[year, ('point_differential', 'mean')]\n    \n    print(f\"{int(year)}: {int(games_count)} games, {int(home_wins)} home wins , average point difference: {int(avg_diff)}\")\n\n#-------------------- Missing Values Analysis\nprint(\"\\nMissing Values Analysis:\")\n\n# Summarize the missing vaules for referee actions\n\n# Key variables for referee analysis\nkey_variables = ['gameId', 'officialId', 'teamTricode', 'foulPersonalTotal', \n                'scoreHome', 'scoreAway', 'timeActual', 'period']\n\n# Missing values within actionType calls \nactiontype_total = wnba_data.groupby('actionType')['officialId'].size().reset_index(name='total_count')\nactiontype_with_ref = wnba_data[wnba_data['officialId'].notnull()].groupby('actionType')['officialId'].count().reset_index(name='referee_count')\nactiontype_counts = pd.merge(actiontype_total, actiontype_with_ref, on='actionType', how='left').fillna(0)\nactiontype_counts['percent_missing'] = ((actiontype_counts['total_count'] - actiontype_counts['referee_count']) / actiontype_counts['total_count'] * 100).round(1)\nactiontype_counts = actiontype_counts.sort_values('percent_missing', ascending=False).set_index('actionType')\nprint(actiontype_counts[['total_count', 'referee_count', 'percent_missing']])\n\n# Visualize missing values\nplt.figure(figsize=(10,6))\nsns.barplot(\n    x=actiontype_counts.index, \n    y=actiontype_counts['percent_missing'])\nplt.xticks(rotation=75, ha='right')\nplt.title('Referee ID Missingness by ActionType', fontsize=14, fontweight='bold')\nplt.xlabel('ActionType')\nplt.ylabel('Percent Missing (%)')\nplt.ylim(0, 105)\nplt.tight_layout()\nplt.show()\n\n# Visualize missing referee ID values for different subtypes within actionType = 'Turnover'\nturnover_data = wnba_data[wnba_data['actionType'] == 'turnover']\n\nsubtype_total = turnover_data.groupby('subType')['officialId'].size().reset_index(name='total_count')\nsubtype_with_ref = turnover_data[turnover_data['officialId'].notnull()].groupby('subType')['officialId'].count().reset_index(name='referee_count')\nsubtype_counts = pd.merge(subtype_total, subtype_with_ref, on='subType', how='left').fillna(0)\nsubtype_counts['percent_missing'] = ((subtype_counts['total_count'] - subtype_counts['referee_count']) / subtype_counts['total_count'] * 100).round(1)\nsubtype_counts = subtype_counts.sort_values('percent_missing', ascending=False).set_index('subType')\nprint(\"\\nMissing Referee ID Values for Turnover Subtypes:\")\nprint(subtype_counts[['total_count', 'referee_count', 'percent_missing']]) \n\n# Visualize missing values\nplt.figure(figsize=(10,6))\nsns.barplot(\n    x=subtype_counts.index, \n    y=subtype_counts['percent_missing'])\nplt.xticks(rotation=75, ha='right')\nplt.title('Referee ID Missingness by ActionType', fontsize=14, fontweight='bold')\nplt.xlabel('ActionType')\nplt.ylabel('Percent Missing (%)')\nplt.ylim(0, 105)\nplt.tight_layout()\nplt.show()\n\n\n\n\n1. Summary of the Game Data:\nNumber of games: 65\nDate range: August 2022 to October 2024\nNumber of teams: 11\nTeams: ['ATL', 'CHI', 'CON', 'DAL', 'IND', 'LVA', 'MIN', 'NYL', 'PHO', 'SEA', 'WAS']\n\n2. Summary of the Referee Assignments:\nGames with referee data: 65 out of 65 total games (100.0%)\nRecords with referee data: 2,793 (9.9%)\nUnique referees: 27\nAverage referees per game: 3.05\n\nTop 10 Most Active Referees (by unique games):\nofficialId\n100697.0     20\n201538.0     20\n100274.0     19\n203440.0     18\n202297.0     17\n203800.0     16\n1628702.0    14\n203891.0      8\n101044.0      8\n1628167.0     8\nName: gameId, dtype: int64\n\n\n\n\n\n\n\n\n\n\nOutcomes by Season:\n2022: 23 games, 12 home wins , average point difference: 5\n2023: 20 games, 13 home wins , average point difference: 9\n2024: 22 games, 17 home wins , average point difference: 6\n\nMissing Values Analysis:\n              total_count  referee_count  percent_missing\nactionType                                               \n2pt                  6022            0.0            100.0\n3pt                  2940            0.0            100.0\nblock                 566            0.0            100.0\nfreethrow            2044            0.0            100.0\ngame                   65            0.0            100.0\njumpball              191            0.0            100.0\nsubstitution         5070            0.0            100.0\nperiod                528            0.0            100.0\nrebound              5416            0.0            100.0\nsteal                 876            0.0            100.0\ntimeout               664            0.0            100.0\nturnover             1631          711.0             56.4\nviolation              87           80.0              8.0\nfoul                 2003         2002.0              0.0\n\n\n\n\n\n\n\n\n\n\nMissing Referee ID Values for Turnover Subtypes:\n                       total_count  referee_count  percent_missing\nsubType                                                           \nbad pass                       582            0.0            100.0\njumpball violation               2            0.0            100.0\noffensive-kicked-ball            1            0.0            100.0\nlost ball                      305            4.0             98.7\n3-second-violation              17           14.0             17.6\nbackcourt                        9            8.0             11.1\nshot clock                     129          115.0             10.9\nout-of-bounds                  337          322.0              4.5\ntraveling                       96           95.0              1.0\n5-second-violation               2            2.0              0.0\ndouble dribble                   2            2.0              0.0\n8-second-violation               2            2.0              0.0\noffensive foul                 142          142.0              0.0\ninbound                          1            1.0              0.0\n\n\n\n\n\n\n\n\n\n\n####  Data Cleaning and Preparation for Referee-level event counts from raw play-by-play\nimport re\nimport numpy as np\nimport pandas as pd\n\n\n# =========================\n# Build home/away mapping\n# =========================\nwnba_data = wnba_data.copy()\nwnba_data['scoreHome_num'] = pd.to_numeric(wnba_data.get('scoreHome'), errors='coerce')\nwnba_data['scoreAway_num'] = pd.to_numeric(wnba_data.get('scoreAway'), errors='coerce')\nwnba_data = wnba_data.sort_values(['gameId','period','timeActual'], kind='mergesort')\n\nwnba_data['home_diff'] = wnba_data.groupby('gameId')['scoreHome_num'].diff()\nwnba_data['away_diff'] = wnba_data.groupby('gameId')['scoreAway_num'].diff()\n\nfirst_home = (\n    wnba_data[wnba_data['home_diff'] &gt; 0]\n    .groupby('gameId', as_index=False)\n    .agg(home_tricode=('teamTricode','first'))\n)\nfirst_away = (\n    wnba_data[wnba_data['away_diff'] &gt; 0]\n    .groupby('gameId', as_index=False)\n    .agg(away_tricode=('teamTricode','first'))\n)\nha_map = pd.merge(first_home, first_away, on='gameId', how='outer')\n\ndf = wnba_data.merge(ha_map, on='gameId', how='left')\ndf['is_home'] = (df['teamTricode'] == df['home_tricode']).astype(int)\ndf['is_away'] = (df['teamTricode'] == df['away_tricode']).astype(int)\ndf['away_game'] = (df['is_away'] == 1).astype(int)\n\n# Referee-level event table\nref_events = wnba_data[wnba_data['officialId'].notna()].copy()\n\n#-- assign each unique referee ID a unique alphabet label \ndef ref_label(idx):\n    return f\"Ref {chr(65 + idx)}\"\n\n# Mapping from officialId based on sorted unique IDs\nunique_ref_ids = sorted(ref_events['officialId'].dropna().unique())\nref_id_to_label = {ref_id: ref_label(i) for i, ref_id in enumerate(unique_ref_ids)}\n\nfor col in ['actionType', 'subType', 'teamTricode']:\n    if col in ref_events.columns:\n        ref_events[col] = ref_events[col].astype(str).str.strip().str.lower().replace({'nan': np.nan})\n\nref_events['teamTricode'] = ref_events['teamTricode'].fillna('unknown')\n\nhome_away_map = df[['gameId','teamTricode','is_home','is_away','away_game']].drop_duplicates()\nref_events = ref_events.merge(home_away_map, on=['gameId','teamTricode'], how='left')\n\nref_events['team_status'] = np.where(ref_events['is_home'] == 1, 'home',\n                            np.where(ref_events['is_away'] == 1, 'away', 'unknown'))\n\n# --- Assign global ref_label ---\nref_events['ref_label'] = ref_events['officialId'].map(ref_id_to_label)\n\n# --- Base counts per (game, ref, teamTricode, team_status)\nref_event_counts = (\n    ref_events.groupby(['gameId','officialId','ref_label','teamTricode','team_status'])\n    .agg(\n        fouls_made=('actionType', lambda x: (x == 'foul').sum()),\n        turnovers_made=('actionType', lambda x: (x == 'turnover').sum())\n    )\n    .reset_index()\n)\n\n# --- Per-subtype counts (pivot wide by subtype) — include team_status in keys\nsubtype_counts = (\n    ref_events.groupby(['gameId','officialId','ref_label','teamTricode','team_status','subType'])\n    .size()\n    .unstack(fill_value=0)\n    .reset_index()\n)\n\nkey_cols = ['gameId','officialId','ref_label','teamTricode','team_status']\nsub_cols = [c for c in subtype_counts.columns if c not in key_cols]\nsubtype_counts = subtype_counts.rename(columns={c: f\"st_{str(c)}\" for c in sub_cols})\n\nreferee_game_data = ref_event_counts.merge(\n    subtype_counts,\n    on=['gameId','officialId','ref_label','teamTricode','team_status'],\n    how='left'\n)\n\ncount_cols = ['fouls_made','turnovers_made'] + [c for c in referee_game_data.columns if c.startswith('st_')]\nreferee_game_data[count_cols] = referee_game_data[count_cols].fillna(0).astype(int)\n\nprint(f\"\\nReferee-game dataset shape: {referee_game_data.shape}\")\nprint(f\"Unique referees: {referee_game_data['officialId'].nunique()}\")\nprint(f\"Referee-game records: {len(referee_game_data)}\")\n\nsample_cols = ['gameId','officialId','ref_label','teamTricode','team_status','fouls_made','turnovers_made']\nif 'st_traveling' in referee_game_data.columns:\n    sample_cols.append('st_traveling')\nprint(\"\\nSample of Referee-game dataset:\")\nprint(referee_game_data[sample_cols].head(5))\n\n\nReferee-game dataset shape: (394, 24)\nUnique referees: 27\nReferee-game records: 394\n\nSample of Referee-game dataset:\n       gameId  officialId ref_label teamTricode team_status  fouls_made  \\\n0  1042200101    100274.0     Ref A         lva     unknown           5   \n1  1042200101    100274.0     Ref A         pho     unknown           3   \n2  1042200101    101044.0     Ref E         lva     unknown           7   \n3  1042200101    101044.0     Ref E         pho     unknown           7   \n4  1042200101   1628167.0     Ref Q         lva     unknown           6   \n\n   turnovers_made  st_traveling  \n0               3             1  \n1               1             0  \n2               4             0  \n3               2             0  \n4               2             0  \n\n\n\nimport os\nimport pandas as pd\nimport numpy as np\n\n# --- normalize text fields\nfor c in ['actionType','subType','teamTricode']:\n    if c in wnba_data.columns:\n        wnba_data[c] = wnba_data[c].astype(str).str.lower().replace('nan', np.nan)\n\n# --- coerce scores to numeric\nwnba_data['scoreHome_num'] = pd.to_numeric(wnba_data['scoreHome'], errors='coerce')\nwnba_data['scoreAway_num'] = pd.to_numeric(wnba_data['scoreAway'], errors='coerce')\n\n# --- sort for correct order\nwnba_data = wnba_data.sort_values(['gameId','period','timeActual'], kind='mergesort')\n\n# --- detect scoreboard increments\nwnba_data['home_diff'] = wnba_data.groupby('gameId')['scoreHome_num'].diff()\nwnba_data['away_diff'] = wnba_data.groupby('gameId')['scoreAway_num'].diff()\n\n# --- first scoring teams = home/away\nfirst_home = (\n    wnba_data[wnba_data['home_diff'] &gt; 0]\n    .groupby('gameId', as_index=False)\n    .agg(home_tricode=('teamTricode','first'))\n)\nfirst_away = (\n    wnba_data[wnba_data['away_diff'] &gt; 0]\n    .groupby('gameId', as_index=False)\n    .agg(away_tricode=('teamTricode','first'))\n)\nha_map = pd.merge(first_home, first_away, on='gameId', how='outer')\n\n# --- merge mapping back\ndf = wnba_data.merge(ha_map, on='gameId', how='left')\ndf['is_home'] = (df['teamTricode'] == df['home_tricode']).astype(int)\ndf['is_away'] = (df['teamTricode'] == df['away_tricode']).astype(int)\n\n# --- turnover types that involve whistles\nturnover_keep = {\n    '3-second-violation','backcourt','shot clock','out-of-bounds',\n    'traveling','5-second-violation','double dribble','8-second-violation',\n    'offensive foul','inbound'\n}\n\n# --- keep fouls + selected turnovers\nmask_foul = df['actionType'] == 'foul'\nmask_to   = (df['actionType'] == 'turnover') & df['subType'].isin(turnover_keep)\ndf = df[mask_foul | mask_to].copy()\n\n# --- basic foul + turnover counts\ndf['foul_count'] = (df['actionType'] == 'foul').astype(int)\ndf['turnover_whistle'] = (df['actionType'] == 'turnover').astype(int)\n\n# --- split by home/away\ndf['foul_count_home'] = df['foul_count'] * df['is_home']\ndf['foul_count_away'] = df['foul_count'] * df['is_away']\ndf['turnover_whistle_home'] = df['turnover_whistle'] * df['is_home']\ndf['turnover_whistle_away'] = df['turnover_whistle'] * df['is_away']\n\n\n# GLOBAL REF LABEL MAPPING\n\nunique_ref_ids = sorted(df['officialId'].dropna().unique())\nref_id_to_label = {ref_id: f\"Ref {chr(65+i)}\" for i, ref_id in enumerate(unique_ref_ids)}\n\n# Per-game crew label string using global mapping\ndef crew_label_str(official_ids):\n    ids = [oid for oid in sorted(set(official_ids)) if pd.notna(oid)]\n    return ', '.join([ref_id_to_label[oid] for oid in ids])\n\ncrew_map = (\n    df.groupby('gameId')['officialId']\n      .apply(lambda s: sorted(set(s.dropna())))\n      .reset_index(name='official_ids')\n)\ncrew_map['crew_combo'] = crew_map['official_ids'].apply(crew_label_str)\ncrew_map = crew_map[['gameId','crew_combo']]\n\n# Attach each event’s ref_label using the global mapping\ndf['ref_label'] = df['officialId'].map(ref_id_to_label)\n\n# INDIVIDUAL (per ref per game) aggregates\nreferee_game_data = (\n    df.groupby(['gameId','officialId','ref_label','teamTricode'])\n      .agg(\n          fouls_made=('foul_count','sum'),\n          turnovers_made=('turnover_whistle','sum'),\n          fouls_home=('foul_count_home','sum'),\n          fouls_away=('foul_count_away','sum'),\n          to_home=('turnover_whistle_home','sum'),\n          to_away=('turnover_whistle_away','sum')\n      )\n      .reset_index()\n)\n\n# CREW (per game) aggregates\n\ngames_with_refs = (\n    df.groupby('gameId')\n      .agg(\n          official_crew=('officialId', lambda x: sorted(set(x.dropna()))),\n          foul_count=('foul_count','sum'),\n          foul_count_home=('foul_count_home','sum'),\n          foul_count_away=('foul_count_away','sum'),\n          turnover_whistle=('turnover_whistle','sum'),\n          turnover_whistle_home=('turnover_whistle_home','sum'),\n          turnover_whistle_away=('turnover_whistle_away','sum'),\n          scoreHome=('scoreHome_num','max'),\n          scoreAway=('scoreAway_num','max')\n      )\n      .reset_index()\n)\n\n# Apply the global crew label string\ngames_with_refs = games_with_refs.merge(crew_map, on='gameId', how='left')\ngames_with_refs['crew_size'] = games_with_refs['official_crew'].apply(lambda ids: len(set(ids)))\ngames_with_refs['point_diff_home'] = games_with_refs['scoreHome'] - games_with_refs['scoreAway']\ngames_with_refs['home_win'] = (games_with_refs['point_diff_home'] &gt; 0).astype(int)\ngames_with_refs['away_game'] = (games_with_refs['home_win'] == 0).astype(int)\n\ngames_with_refs.to_csv(os.path.join(data_folder, 'games_with_refs.csv'), index=False)\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"white\")\n\n# 1) REFEREE-LEVEL DIFFERENCES (by ref_label)\n\n# Ensure a label exists\nif \"ref_label\" not in referee_game_data.columns:\n    referee_game_data[\"ref_label\"] = referee_game_data[\"officialId\"].astype(str)\n\nhave_split = all(c in referee_game_data.columns for c in [\"fouls_home\",\"fouls_away\",\"to_home\",\"to_away\"])\n\nif have_split:\n    # Collapse to one row per (gameId, ref_label) if data are split by team\n    cols_to_sum = [\"fouls_home\",\"fouls_away\",\"to_home\",\"to_away\"]\n    ref_game = (referee_game_data\n                .groupby([\"gameId\",\"ref_label\"], as_index=False)[cols_to_sum].sum())\n    ref_game[\"foul_diff_game\"] = ref_game[\"fouls_away\"] - ref_game[\"fouls_home\"]\n    ref_game[\"to_diff_game\"]   = ref_game[\"to_away\"]    - ref_game[\"to_home\"]\nelse:\n    # Derive splits from team role column if needed\n    role_col = \"team_status\" if \"team_status\" in referee_game_data.columns else (\n               \"team_role\"   if \"team_role\"   in referee_game_data.columns else None)\n    if role_col is None:\n        raise ValueError(\"Need split cols (fouls_home/away,to_home/away) OR a role column (team_status/team_role).\")\n\n    tmp = referee_game_data[[\"gameId\",\"ref_label\",role_col,\"fouls_made\",\"turnovers_made\"]].copy()\n    pvt = tmp.pivot_table(index=[\"gameId\",\"ref_label\"],\n                          columns=role_col,\n                          values=[\"fouls_made\",\"turnovers_made\"],\n                          aggfunc=\"sum\",\n                          fill_value=0)\n    home_fouls = pvt[(\"fouls_made\",\"home\")] if (\"fouls_made\",\"home\") in pvt.columns else 0\n    away_fouls = pvt[(\"fouls_made\",\"away\")] if (\"fouls_made\",\"away\") in pvt.columns else 0\n    home_to    = pvt[(\"turnovers_made\",\"home\")] if (\"turnovers_made\",\"home\") in pvt.columns else 0\n    away_to    = pvt[(\"turnovers_made\",\"away\")] if (\"turnovers_made\",\"away\") in pvt.columns else 0\n\n    ref_game = pvt.reset_index()\n    ref_game[\"foul_diff_game\"] = np.array(away_fouls) - np.array(home_fouls)\n    ref_game[\"to_diff_game\"]   = np.array(away_to)    - np.array(home_to)\n\n# Average per ref_label\nref_summary = (ref_game\n               .groupby(\"ref_label\", as_index=False)\n               .agg(\n                   avg_foul_diff_away_home=(\"foul_diff_game\",\"mean\"),\n                   avg_turnover_diff_away_home=(\"to_diff_game\",\"mean\"),\n                   games_officiated=(\"gameId\",\"nunique\")\n               ))\n\n# Orders for the two referee plots\nref_sorted_foul = ref_summary.sort_values(\"avg_foul_diff_away_home\", ascending=False)\norder_refs_foul = ref_sorted_foul[\"ref_label\"].tolist()\n\nref_sorted_to   = ref_summary.sort_values(\"avg_turnover_diff_away_home\", ascending=False)\norder_refs_to   = ref_sorted_to[\"ref_label\"].tolist()\n\n# 2) CREW-LEVEL DIFFERENCES \n\ncrew_name_col = \"crew_combo\" if \"crew_combo\" in games_with_refs.columns else (\n                \"crew_str\"   if \"crew_str\"   in games_with_refs.columns else None)\nif crew_name_col is None:\n    games_with_refs[\"crew_str\"] = games_with_refs[\"official_crew\"].apply(\n        lambda ids: \", \".join(map(str, sorted(ids))) if isinstance(ids, (list,tuple)) else str(ids)\n    )\n    crew_name_col = \"crew_str\"\n\ncrew_df = games_with_refs.copy()\ncrew_df[\"crew_foul_diff_game\"] = crew_df[\"foul_count_away\"] - crew_df[\"foul_count_home\"]\ncrew_df[\"crew_to_diff_game\"]   = crew_df[\"turnover_whistle_away\"] - crew_df[\"turnover_whistle_home\"]\n\ncrew_summary = (crew_df.groupby(crew_name_col, as_index=False)\n                .agg(\n                    avg_foul_diff_per_game=(\"crew_foul_diff_game\",\"mean\"),\n                    avg_to_diff_per_game=(\"crew_to_diff_game\",\"mean\"),\n                    games_officiated=(\"gameId\",\"nunique\")\n                ))\n\n\ncrew_sorted_foul = crew_summary.sort_values(\"avg_foul_diff_per_game\", ascending=False)\norder_crews_foul = crew_sorted_foul[crew_name_col].tolist()\n\ncrew_sorted_to   = crew_summary.sort_values(\"avg_to_diff_per_game\", ascending=False)\norder_crews_to   = crew_sorted_to[crew_name_col].tolist()\n\n# Add new calculations to the dataframes\n\n# For referee-level: add total fouls and turnovers per game, plus home/away ratios\nref_game[\"total_fouls\"] = ref_game[\"fouls_home\"] + ref_game[\"fouls_away\"]\nref_game[\"total_turnovers\"] = ref_game[\"to_home\"] + ref_game[\"to_away\"]\nref_game[\"foul_home_ratio\"] = ref_game[\"fouls_home\"] / (ref_game[\"total_fouls\"] + 1e-6)\nref_game[\"foul_away_ratio\"] = ref_game[\"fouls_away\"] / (ref_game[\"total_fouls\"] + 1e-6)\nref_game[\"to_home_ratio\"] = ref_game[\"to_home\"] / (ref_game[\"total_turnovers\"] + 1e-6)\nref_game[\"to_away_ratio\"] = ref_game[\"to_away\"] / (ref_game[\"total_turnovers\"] + 1e-6)\n\nref_summary = (ref_game\n    .groupby(\"ref_label\", as_index=False)\n    .agg(\n        avg_foul_diff_away_home=(\"foul_diff_game\",\"mean\"),\n        avg_turnover_diff_away_home=(\"to_diff_game\",\"mean\"),\n        games_officiated=(\"gameId\",\"nunique\"),\n        avg_total_fouls=(\"total_fouls\",\"mean\"),\n        avg_total_turnovers=(\"total_turnovers\",\"mean\"),\n        avg_foul_home_ratio=(\"foul_home_ratio\",\"mean\"),\n        avg_foul_away_ratio=(\"foul_away_ratio\",\"mean\"),\n        avg_to_home_ratio=(\"to_home_ratio\",\"mean\"),\n        avg_to_away_ratio=(\"to_away_ratio\",\"mean\")\n    ))\n\n# For crew-level: add total fouls and turnovers per game, plus home/away ratios\ncrew_df[\"crew_total_fouls\"] = crew_df[\"foul_count_home\"] + crew_df[\"foul_count_away\"]\ncrew_df[\"crew_total_turnovers\"] = crew_df[\"turnover_whistle_home\"] + crew_df[\"turnover_whistle_away\"]\ncrew_df[\"crew_foul_home_ratio\"] = crew_df[\"foul_count_home\"] / (crew_df[\"crew_total_fouls\"] + 1e-6)\ncrew_df[\"crew_foul_away_ratio\"] = crew_df[\"foul_count_away\"] / (crew_df[\"crew_total_fouls\"] + 1e-6)\ncrew_df[\"crew_to_home_ratio\"] = crew_df[\"turnover_whistle_home\"] / (crew_df[\"crew_total_turnovers\"] + 1e-6)\ncrew_df[\"crew_to_away_ratio\"] = crew_df[\"turnover_whistle_away\"] / (crew_df[\"crew_total_turnovers\"] + 1e-6)\n\ncrew_summary = (crew_df.groupby(crew_name_col, as_index=False)\n    .agg(\n        avg_foul_diff_per_game=(\"crew_foul_diff_game\",\"mean\"),\n        avg_to_diff_per_game=(\"crew_to_diff_game\",\"mean\"),\n        games_officiated=(\"gameId\",\"nunique\"),\n        avg_total_fouls=(\"crew_total_fouls\",\"mean\"),\n        avg_total_turnovers=(\"crew_total_turnovers\",\"mean\"),\n        avg_foul_home_ratio=(\"crew_foul_home_ratio\",\"mean\"),\n        avg_foul_away_ratio=(\"crew_foul_away_ratio\",\"mean\"),\n        avg_to_home_ratio=(\"crew_to_home_ratio\",\"mean\"),\n        avg_to_away_ratio=(\"crew_to_away_ratio\",\"mean\")\n    ))\n\ndef add_bar_labels(ax, fmt=\"{:.1f}\"):\n        for p in ax.patches:\n            val = p.get_height()\n            if val != 0:\n                ax.annotate(fmt.format(val),\n                            (p.get_x() + p.get_width() / 2, val),\n                            ha='center', va='bottom', fontsize=11, xytext=(0, 3),\n                            textcoords='offset points')\n# --- Referee plots ---\n\n# (A) Refs: Avg Foul Diff (Away − Home) — sorted DESC (vertical)\nplt.figure(figsize=(9, 8))\nax1 = sns.barplot(data=ref_sorted_foul, x=\"ref_label\", y=\"avg_foul_diff_away_home\", order=order_refs_foul)\nax1.axhline(0, lw=1, color=\"gray\")\nax1.set_title(\"Referees — Avg Foul Difference (Away − Home) per Game\", fontsize=16, pad=12)\nax1.set_xlabel(\"Referee\", fontsize=14)\nax1.set_ylabel(\"Avg Foul Diff (Away − Home)\", fontsize=14)\nax1.tick_params(axis=\"x\", rotation=90, labelsize=11)\nadd_bar_labels(ax1)\nplt.tight_layout()\nplt.show()\n\n# (B) Refs: Avg Whistle TO Diff (Away − Home) — sorted DESC (vertical)\nplt.figure(figsize=(9, 8))\nax2 = sns.barplot(data=ref_sorted_to, x=\"ref_label\", y=\"avg_turnover_diff_away_home\", order=order_refs_to)\nax2.axhline(0, lw=1, color=\"gray\")\nax2.set_title(\"Referees — Avg Whistle Turnover Difference (Away − Home) per Game\", fontsize=16, pad=12)\nax2.set_xlabel(\"Referee\", fontsize=14)\nax2.set_ylabel(\"Avg TO Diff (Away − Home)\", fontsize=14)\nax2.tick_params(axis=\"x\", rotation=90, labelsize=11)\nadd_bar_labels(ax2)\nplt.tight_layout()\nplt.show()\n\n# --- Crew plots ---\n\n# Crews: Avg Foul Diff — ALL crews\nplt.figure(figsize=(9, 8))\nax3 = sns.barplot(data=crew_sorted_foul, x=crew_name_col, y=\"avg_foul_diff_per_game\", order=order_crews_foul)\nax3.axhline(0, lw=1, color=\"gray\")\nax3.set_title(\"Crews — Avg Foul Difference (Away − Home) per Game\", fontsize=16, pad=12)\nax3.set_xlabel(\"Crew\", fontsize=14)\nax3.set_ylabel(\"Avg Foul Diff (Away − Home)\", fontsize=14)\nax3.tick_params(axis=\"x\", rotation=90, labelsize=10)\nax3.margins(x=0.01)\nadd_bar_labels(ax3)\nplt.tight_layout()\nplt.show()\n\n# Crews: Avg Whistle TO Diff — ALL crews\nplt.figure(figsize=(9, 8))\nax4 = sns.barplot(data=crew_sorted_to, x=crew_name_col, y=\"avg_to_diff_per_game\", order=order_crews_to)\nax4.axhline(0, lw=1, color=\"gray\")\nax4.set_title(\"Crews — Avg Whistle Turnover Difference (Away − Home) per Game\", fontsize=16, pad=12)\nax4.set_xlabel(\"Crew\", fontsize=14)\nax4.set_ylabel(\"Avg TO Diff (Away − Home)\", fontsize=14)\nax4.tick_params(axis=\"x\", rotation=90, labelsize=10)\nax4.margins(x=0.01)\nadd_bar_labels(ax4)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"white\")\npalette = sns.color_palette(\"crest\")\nCOLOR_OUTLIER = \"red\"\n\n# ---------- helpers ----------\ndef get_outliers(df, x_col, y_col, n=10, center=(0.0, 0.0)):\n    \"\"\"Return top-n farthest points from `center` (default neutral 0,0).\"\"\"\n    c = np.array(center, dtype=float)\n    pts = df[[x_col, y_col]].to_numpy(dtype=float)\n    dist = np.linalg.norm(pts - c, axis=1)\n    return df.iloc[dist.argsort()[-n:]]\n\ndef annotate_quadrants(ax, x0=0.0, y0=0.0, color=\"blue\", fx=0.45, fy=0.45, fs=9):\n    \"\"\"Place quadrant labels inside each quadrant, relative to (x0,y0).\"\"\"\n    ax.axvline(x0, ls=\"--\", lw=1, color=\"gray\", zorder=0)\n    ax.axhline(y0, ls=\"--\", lw=1, color=\"gray\", zorder=0)\n\n    xlo, xhi = ax.get_xlim(); ylo, yhi = ax.get_ylim()\n    xR = x0 + fx*(xhi - x0); xL = x0 - fx*(x0 - xlo)\n    yT = y0 + fy*(yhi - y0); yB = y0 - fy*(y0 - ylo)\n\n    box = dict(boxstyle=\"round,pad=0.3\", fc=\"white\", ec=\"none\", alpha=0.8)\n    ax.text(xR, yT, \"More fouls & more TOs on AWAY\\n(strict on away)\",\n            ha=\"center\", va=\"center\", fontsize=fs, color=color, bbox=box, clip_on=False)\n    ax.text(xL, yT, \"Fewer fouls on AWAY, more TOs on AWAY\\n(turnover-heavy on away)\",\n            ha=\"center\", va=\"center\", fontsize=fs, color=color, bbox=box, clip_on=False)\n    ax.text(xR, yB, \"More fouls on AWAY, fewer TOs on AWAY\\n(foul-heavy on away)\",\n            ha=\"center\", va=\"center\", fontsize=fs, color=color, bbox=box, clip_on=False)\n    ax.text(xL, yB, \"Fewer fouls & fewer TOs on AWAY\\n(lenient on away)\",\n            ha=\"center\", va=\"center\", fontsize=fs, color=color, bbox=box, clip_on=False)\n\ndef label_outliers(ax, df, x_col, y_col, id_col, dx_frac=0.00, dy_frac=0.02, color=\"black\", fs=9):\n    \"\"\"Label points just BELOW each outlier dot (axis-relative offset).\"\"\"\n    xlo, xhi = ax.get_xlim(); ylo, yhi = ax.get_ylim()\n    dx = dx_frac * (xhi - xlo); dy = dy_frac * (yhi - ylo)\n    for _, r in df.iterrows():\n        ax.text(r[x_col] + dx, r[y_col] - dy, str(r[id_col]),\n                ha=\"center\", va=\"top\", fontsize=fs, color=color, clip_on=False)\n\n# --------------- INDIVIDUAL REFEREES ---------------\nout_refs = get_outliers(ref_summary,\n                        'avg_foul_diff_away_home',\n                        'avg_turnover_diff_away_home',\n                        n=5, center=(0.0, 0.0))\n\nplt.figure(figsize=(8,6))\nsns.scatterplot(data=ref_summary,\n                x='avg_foul_diff_away_home', y='avg_turnover_diff_away_home',\n                size='games_officiated', sizes=(30, 300),\n                alpha=0.8, color=palette[2], legend=False)\nsns.scatterplot(data=out_refs,\n                x='avg_foul_diff_away_home', y='avg_turnover_diff_away_home',\n                size='games_officiated', sizes=(30, 300),\n                alpha=0.95, color=COLOR_OUTLIER, legend=False)\n\nannotate_quadrants(plt.gca(), x0=0.0, y0=0.0, fx=0.45, fy=0.45, fs=9)\nlabel_outliers(plt.gca(), out_refs,\n               'avg_foul_diff_away_home', 'avg_turnover_diff_away_home',\n               'ref_label', dy_frac=0.025, fs=9)\n\nplt.title('Individual Referees:\\nAvg Foul vs. Turnover Whistle Difference (Away - Home) per Game',\n          fontsize=14, pad=12)\nplt.xlabel('Avg Foul Difference (Away - Home) per Game', fontsize=12)\nplt.ylabel('Avg Turnover Whistle Difference (Away - Home) per Game', fontsize=12)\nplt.grid(False)\nplt.show()\n\n# ---------------- REFEREE CREWS ----------------\nout_crews = get_outliers(crew_summary,\n                         'avg_foul_diff_per_game', 'avg_to_diff_per_game',\n                         n=5, center=(0.0, 0.0))\n\nplt.figure(figsize=(10,8))\nsns.scatterplot(data=crew_summary,\n                x='avg_foul_diff_per_game', y='avg_to_diff_per_game',\n                size='games_officiated', sizes=(30, 300),\n                alpha=0.8, color=palette[3], legend=False)\nsns.scatterplot(data=out_crews,\n                x='avg_foul_diff_per_game', y='avg_to_diff_per_game',\n                size='games_officiated', sizes=(30, 300),\n                alpha=0.95, color=COLOR_OUTLIER, legend=False)\n\nannotate_quadrants(plt.gca(), x0=0.0, y0=0.0, fx=0.45, fy=0.45, fs=9)\nlabel_outliers(plt.gca(), out_crews,\n               'avg_foul_diff_per_game', 'avg_to_diff_per_game',\n               crew_name_col, dy_frac=0.025, fs=9)\n\nplt.title('Referee Crews:\\nAvg Foul vs. Turnover Whistle Difference (Away - Home) per Game',\n          fontsize=14, pad=12)\nplt.xlabel('Avg Foul Difference (Away - Home) per Game', fontsize=12)\nplt.ylabel('Avg Turnover Whistle Difference (Away - Home) per Game', fontsize=12)\nplt.grid(False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score, calinski_harabasz_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme(style=\"white\")\n\n# Refs  ----- features and clustering\nref_features = ref_summary[['ref_label',\n                            'avg_foul_diff_away_home',\n                            'avg_turnover_diff_away_home',\n                            'games_officiated']].copy()\nref_X = ref_features[['avg_foul_diff_away_home',\n                      'avg_turnover_diff_away_home',\n                      'games_officiated']].fillna(0.0)\nref_X_scaled = StandardScaler().fit_transform(ref_X)\n \n# Crews ----- features and clustering\ncrew_label_col = 'crew_combo' if 'crew_combo' in crew_summary.columns else 'crew_str'\ncrew_features = crew_summary[[crew_label_col,\n                              'avg_foul_diff_per_game',\n                              'avg_to_diff_per_game',\n                              'games_officiated']].copy()\ncrew_X = crew_features[['avg_foul_diff_per_game',\n                        'avg_to_diff_per_game',\n                        'games_officiated']].fillna(0.0)\ncrew_X_scaled = StandardScaler().fit_transform(crew_X)\n\nk_grid = list(range(2, 10))\n\n# Refs ---- - Calinski-Harabasz scores\nref_scores = []\nfor k in k_grid:\n    km = KMeans(n_clusters=k, random_state=42, n_init=20)\n    lbl = km.fit_predict(ref_X_scaled)\n    ref_scores.append(calinski_harabasz_score(ref_X_scaled, lbl))\n\n# Crews ---- - Calinski-Harabasz scores\ncrew_scores = []\nfor k in k_grid:\n    km = KMeans(n_clusters=k, random_state=42, n_init=20)\n    lbl = km.fit_predict(crew_X_scaled)\n    crew_scores.append(calinski_harabasz_score(crew_X_scaled, lbl))\n\n\n# Plot CH curves as individual plots\nchosen_k_ref  = 6\nchosen_k_crew = 8\n\n# Calinski–Harabasz (Refs)\nplt.figure(figsize=(7, 5))\nplt.plot(k_grid, ref_scores, marker='o')\nref_ch_at_choice = ref_scores[k_grid.index(chosen_k_ref)]\nplt.axvline(chosen_k_ref, ls='--', lw=1, color='gray')\nplt.scatter([chosen_k_ref], [ref_ch_at_choice], zorder=3)\nplt.text(chosen_k_ref, ref_ch_at_choice,\n         f'  chosen k={chosen_k_ref}\\n  CH={ref_ch_at_choice:.1f}',\n         va='bottom', ha='left', fontsize=10)\nplt.title('Calinski–Harabasz (Refs)')\nplt.xlabel('k'); plt.ylabel('CH score'); plt.grid(False)\nplt.tight_layout(); plt.show()\n\n# Calinski–Harabasz (Crews)\nplt.figure(figsize=(7, 5))\nplt.plot(k_grid, crew_scores, marker='o')\ncrew_ch_at_choice = crew_scores[k_grid.index(chosen_k_crew)]\nplt.axvline(chosen_k_crew, ls='--', lw=1, color='gray')\nplt.scatter([chosen_k_crew], [crew_ch_at_choice], zorder=3)\nplt.text(chosen_k_crew, crew_ch_at_choice,\n         f'  chosen k={chosen_k_crew}\\n  CH={crew_ch_at_choice:.1f}',\n         va='bottom', ha='left', fontsize=10)\nplt.title('Calinski–Harabasz (Crews)')\nplt.xlabel('k'); plt.ylabel('CH score'); plt.grid(False)\nplt.tight_layout(); plt.show()\n\n\n# Individual Referees --- KMeans clustering\nkm_ref = KMeans(n_clusters=chosen_k_ref, random_state=42, n_init=20)\nref_features['cluster'] = km_ref.fit_predict(ref_X_scaled)\n\npca_ref = PCA(n_components=2, random_state=42)\nref_pca = pca_ref.fit_transform(ref_X_scaled)\nv1, v2 = pca_ref.explained_variance_ratio_ * 100\n\nplt.figure(figsize=(7.2, 6))\nax = sns.scatterplot(x=ref_pca[:,0], y=ref_pca[:,1],\n                     hue=ref_features['cluster'], palette=\"tab10\",\n                     alpha=0.9, s=70, edgecolor=\"k\", linewidth=0.4, legend=True)\nax.set_title(\"Referee Clusters (PCA of diff features)\")\nax.set_xlabel(f\"PCA 1 ({v1:.1f}% var)\")\nax.set_ylabel(f\"PCA 2 ({v2:.1f}% var)\")\nax.grid(False); ax.set_aspect(\"equal\", adjustable=\"datalim\")\nax.legend(title=\"Cluster\", loc=\"best\", frameon=True, framealpha=0.9)\nplt.tight_layout(); plt.show()\nsil_ref = silhouette_score(ref_X_scaled, ref_features['cluster'])\nprint(f\"[REF] chosen k: {chosen_k_ref} | silhouette: {sil_ref:.3f}\")\n\n\n\n# Crews --- KMeans clustering\nkm_crew = KMeans(n_clusters=chosen_k_crew, random_state=42, n_init=20)\ncrew_features['cluster'] = km_crew.fit_predict(crew_X_scaled)\n\npca_crew = PCA(n_components=2, random_state=42)\ncrew_pca = pca_crew.fit_transform(crew_X_scaled)\ncv1, cv2 = pca_crew.explained_variance_ratio_ * 100\n\nplt.figure(figsize=(7.2, 6))\nax = sns.scatterplot(x=crew_pca[:,0], y=crew_pca[:,1],\n                     hue=crew_features['cluster'], palette=\"tab10\",\n                     alpha=0.9, s=70, edgecolor=\"k\", linewidth=0.4, legend=True)\nax.set_title(\"Referee Crew Clusters (PCA of diff features)\")\nax.set_xlabel(f\"PCA 1 ({cv1:.1f}% var)\")\nax.set_ylabel(f\"PCA 2 ({cv2:.1f}% var)\")\nax.grid(False); ax.set_aspect(\"equal\", adjustable=\"datalim\")\nax.legend(title=\"Cluster\", loc=\"best\", frameon=True, framealpha=0.9)\nplt.tight_layout(); plt.show()\n\nsil_crew = silhouette_score(crew_X_scaled, crew_features['cluster'])\nprint(f\"[CREW] chosen k: {chosen_k_crew} | silhouette: {sil_crew:.3f}\")\n\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\n\n\n\n\n\n\n\n\n\n[REF] chosen k: 6 | silhouette: 0.376\n\n\nc:\\Users\\amyes\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n  warnings.warn(\n\n\n\n\n\n\n\n\n\n[CREW] chosen k: 8 | silhouette: 0.442\n\n\n\nimport pandas as pd\nimport numpy as np\n\n# ---- PCA loadings (how each original feature contributes to PC axes)\ndef print_loadings(pca, feature_names, title):\n    L = pd.DataFrame(pca.components_, columns=feature_names, index=[f'PC{i+1}' for i in range(pca.n_components_)])\n    exp = (pca.explained_variance_ratio_ * 100).round(1)\n    print(f\"\\n{title} loadings (% var: {list(exp)})\")\n    print(L.round(3))\n\nprint_loadings(pca_ref, ['avg_foul_diff_away_home','avg_turnover_diff_away_home','games_officiated'],\n               \"REF PCA\")\nprint_loadings(pca_crew, ['avg_foul_diff_per_game','avg_to_diff_per_game','games_officiated'],\n               \"CREW PCA\")\n\n# ---- Per-cluster means and sizes (REFS)\nref_cluster_summary = (\n    ref_features\n    .groupby('cluster', as_index=False)[['avg_foul_diff_away_home','avg_turnover_diff_away_home','games_officiated']]\n    .mean()\n    .assign(n=lambda d: ref_features.groupby('cluster').size().values)\n    .sort_values('cluster')\n)\nprint(\"\\nReferee clusters — feature means and sizes\")\nprint(ref_cluster_summary.round(3))\n\n# ---- Per-cluster means and sizes (CREWS)\ncrew_cluster_summary = (\n    crew_features\n    .groupby('cluster', as_index=False)[['avg_foul_diff_per_game','avg_to_diff_per_game','games_officiated']]\n    .mean()\n    .assign(n=lambda d: crew_features.groupby('cluster').size().values)\n    .sort_values('cluster')\n)\nprint(\"\\nCrew clusters — feature means and sizes\")\nprint(crew_cluster_summary.round(3))\n\n\nREF PCA loadings (% var: [np.float64(50.8), np.float64(31.3)])\n     avg_foul_diff_away_home  avg_turnover_diff_away_home  games_officiated\nPC1                    0.653                        0.677             0.339\nPC2                   -0.320                       -0.158             0.934\n\nCREW PCA loadings (% var: [np.float64(46.1), np.float64(29.5)])\n     avg_foul_diff_per_game  avg_to_diff_per_game  games_officiated\nPC1                   0.633                 0.599            -0.489\nPC2                   0.213                 0.473             0.855\n\nReferee clusters — feature means and sizes\n   cluster  avg_foul_diff_away_home  avg_turnover_diff_away_home  \\\n0        0                    0.083                        0.750   \n1        1                   -1.060                        0.040   \n2        2                    0.417                        0.373   \n3        3                    4.083                        0.833   \n4        4                   -0.035                       -0.667   \n5        5                   -5.000                       -1.000   \n\n   games_officiated  n  \n0             4.000  4  \n1             2.200  5  \n2            17.714  7  \n3             3.667  3  \n4             5.000  7  \n5             1.000  1  \n\nCrew clusters — feature means and sizes\n   cluster  avg_foul_diff_per_game  avg_to_diff_per_game  games_officiated   n\n0        0                   2.556                 2.556               1.0   9\n1        1                   0.429                -2.286               1.0   7\n2        2                  -0.714                -0.214               2.0   7\n3        3                  -3.583                 0.167               1.0  12\n4        4                   4.867                 0.533               1.0  15\n5        5                  -4.000                 5.333               1.0   3\n6        6                  -1.000               -10.000               1.0   1\n7        7                   9.000                 4.750               1.0   4"
  },
  {
    "objectID": "presentation.html#quarto",
    "href": "presentation.html#quarto",
    "title": "Project title",
    "section": "Quarto",
    "text": "Quarto\n\nThe presentation is created using the Quarto CLI\n## sets the start of a new slide"
  },
  {
    "objectID": "presentation.html#layouts",
    "href": "presentation.html#layouts",
    "title": "Project title",
    "section": "Layouts",
    "text": "Layouts\nYou can use plain text\n\n\n\nor bullet points1\n\n\nor in two columns\n\n\nlike\nthis\n\nAnd add footnotes"
  },
  {
    "objectID": "presentation.html#code",
    "href": "presentation.html#code",
    "title": "Project title",
    "section": "Code",
    "text": "Code\n\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                    mpg   R-squared:                       0.073\nModel:                            OLS   Adj. R-squared:                  0.070\nMethod:                 Least Squares   F-statistic:                     30.59\nDate:                Sun, 03 Aug 2025   Prob (F-statistic):           5.84e-08\nTime:                        20:25:25   Log-Likelihood:                -1346.4\nNo. Observations:                 392   AIC:                             2697.\nDf Residuals:                     390   BIC:                             2705.\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst         35.8015      2.266     15.800      0.000      31.347      40.257\nspeed       -354.7055     64.129     -5.531      0.000    -480.788    -228.623\n==============================================================================\nOmnibus:                       27.687   Durbin-Watson:                   0.589\nProb(Omnibus):                  0.000   Jarque-Bera (JB):               18.976\nSkew:                           0.420   Prob(JB):                     7.57e-05\nKurtosis:                       2.323   Cond. No.                         169.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
  },
  {
    "objectID": "presentation.html#plots",
    "href": "presentation.html#plots",
    "title": "Project title",
    "section": "Plots",
    "text": "Plots"
  },
  {
    "objectID": "presentation.html#plot-and-text",
    "href": "presentation.html#plot-and-text",
    "title": "Project title",
    "section": "Plot and text",
    "text": "Plot and text\n\n\n\nSome text\ngoes here"
  },
  {
    "objectID": "presentation.html#tables",
    "href": "presentation.html#tables",
    "title": "Project title",
    "section": "Tables",
    "text": "Tables\nIf you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\n\n\n\nisland\n\n\n\nbill_length_mm\n\n\n\nbill_depth_mm\n\n\n\nflipper_length_mm\n\n\n\nbody_mass_g\n\n\n\nsex\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\nAdelie\n\n\n\nTorgersen\n\n\n\n39.1\n\n\n\n18.7\n\n\n\n181.0\n\n\n\n3750.0\n\n\n\nMale\n\n\n\n\n\n\n\n1\n\n\n\nAdelie\n\n\n\nTorgersen\n\n\n\n39.5\n\n\n\n17.4\n\n\n\n186.0\n\n\n\n3800.0\n\n\n\nFemale\n\n\n\n\n\n\n\n2\n\n\n\nAdelie\n\n\n\nTorgersen\n\n\n\n40.3\n\n\n\n18.0\n\n\n\n195.0\n\n\n\n3250.0\n\n\n\nFemale\n\n\n\n\n\n\n\n4\n\n\n\nAdelie\n\n\n\nTorgersen\n\n\n\n36.7\n\n\n\n19.3\n\n\n\n193.0\n\n\n\n3450.0\n\n\n\nFemale\n\n\n\n\n\n\n\n5\n\n\n\nAdelie\n\n\n\nTorgersen\n\n\n\n39.3\n\n\n\n20.6\n\n\n\n190.0\n\n\n\n3650.0\n\n\n\nMale"
  },
  {
    "objectID": "presentation.html#images",
    "href": "presentation.html#images",
    "title": "Project title",
    "section": "Images",
    "text": "Images\n\nImage credit: Danielle Navarro, Percolate."
  },
  {
    "objectID": "presentation.html#math-expressions",
    "href": "presentation.html#math-expressions",
    "title": "Project title",
    "section": "Math Expressions",
    "text": "Math Expressions\nYou can write LaTeX math expressions inside a pair of dollar signs, e.g. $\\alpha+\\beta$ renders \\(\\alpha + \\beta\\). You can use the display style with double dollar signs:\n$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$\n\\[\n\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i\n\\]\nLimitations:\n\nThe source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting $$ must appear in the very beginning of a line, followed immediately by a non-space character, and the ending $$ must be at the end of a line, led by a non-space character;\nThere should not be spaces after the opening $ or before the closing $."
  },
  {
    "objectID": "presentation.html#feeling-adventurous",
    "href": "presentation.html#feeling-adventurous",
    "title": "Project title",
    "section": "Feeling adventurous?",
    "text": "Feeling adventurous?\n\nYou are welcomed to use the default styling of the slides. In fact, that’s what I expect majority of you will do. You will differentiate yourself with the content of your presentation.\nBut some of you might want to play around with slide styling. Some solutions for this can be found at https://quarto.org/docs/presentations/revealjs."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This project was developed by [Team Name] For INFO 523 - Data Mining and Discovery at the University of Arizona, taught by Dr. Greg Chism. The team is comprised of the following team members.\n\nTeam member 1: One sentence description of Team member 1 (e.g., year, major, etc.).\nTeam member 2: One sentence description of Team member 2 (e.g., year, major, etc.).\nTeam member 3: One sentence description of Team member 3 (e.g., year, major, etc.).\nTeam member 4: One sentence description of Team member 4 (e.g., year, major, etc.)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Whistle Bias? Investigating Referee Influence on WNBA Home Game Outcomes",
    "section": "",
    "text": "The Women’s National Basketball Association (WNBA) has experienced significant growth in recent years, accompanied by an increasing emphasis on data analytics to enhance forecasting and anomaly detection capabilities. This project seeks to evaluate the fairness of officiating in the WNBA by applying data mining techniques to referee assignment data, foul differentials, and game outcomes. The primary objective is to identify potential officiating bias and assess the extent to which individual referees may contribute to a home-court advantage. This study will examine potential officiating bias in WNBA games by analyzing referee assignment data, foul differentials, and game outcomes across multiple seasons."
  },
  {
    "objectID": "index.html#abstract",
    "href": "index.html#abstract",
    "title": "Whistle Bias? Investigating Referee Influence on WNBA Home Game Outcomes",
    "section": "",
    "text": "The Women’s National Basketball Association (WNBA) has experienced significant growth in recent years, accompanied by an increasing emphasis on data analytics to enhance forecasting and anomaly detection capabilities. This project seeks to evaluate the fairness of officiating in the WNBA by applying data mining techniques to referee assignment data, foul differentials, and game outcomes. The primary objective is to identify potential officiating bias and assess the extent to which individual referees may contribute to a home-court advantage. This study will examine potential officiating bias in WNBA games by analyzing referee assignment data, foul differentials, and game outcomes across multiple seasons."
  },
  {
    "objectID": "index.html#research-question",
    "href": "index.html#research-question",
    "title": "Whistle Bias? Investigating Referee Influence on WNBA Home Game Outcomes",
    "section": "Research Question",
    "text": "Research Question\nThe research questions guiding this project are designed to uncover patterns in officiating behavior within the WNBA using unsupervised data mining techniques. Rather than testing predefined hypotheses, the goal is to explore underlying structures and trends in referee decision-making that may indicate systemic tendencies or inconsistencies.\n\nDo home teams have significantly higher win rates under specific referee crews?\nWhen games are officiated by certain referee combinations, do they have higher or lower foul disparity?\nDo certain referees call more fouls on away teams?"
  },
  {
    "objectID": "index.html#dataset",
    "href": "index.html#dataset",
    "title": "Whistle Bias? Investigating Referee Influence on WNBA Home Game Outcomes",
    "section": "Dataset",
    "text": "Dataset\nThe dataset is a granular play-by-play level dataset in order to capture the fouls called within a game with an identifiable referee. The chosen dataset is from Kaggle created by Vladislav Shufinskiy (dataset link) who combined several sources into several datasets for publicly available use. Leveraging this dataset eliminates issues with limitations on API data requests per game for play-by-play details.\n\nGeneral Game Data Overview\nThe dataset consists of 65 games spanning August 2022 to October 2024. A typical WNBA season includes around 40 games between May and September. However, this dataset covers only 65 games total across this period and includes data for 11 teams rather than the full 12 active teams.Therefore, the dataset is incomplete, and any insights drawn from this analysis should be interpreted with caution, as they may not fully represent league-wide trends or season-long dynamics.\n\n\nNumber of games: 65\nDate range: August 2022 to October 2024\nNumber of teams: 11\nTeams: ['ATL', 'CHI', 'CON', 'DAL', 'IND', 'LVA', 'MIN', 'NYL', 'PHO', 'SEA', 'WAS']\n\nOutcomes by Season:\n2022: 23 games, 12 home wins , average point difference: 5\n2023: 20 games, 13 home wins , average point difference: 9\n2024: 22 games, 17 home wins , average point difference: 6\n\n\n\n\nSummary of Referee Assignments\nA total of 27 unique referees appear across these games, with an average of 3.05 referees per game, which aligns with the standard three-person officiating crew format in the WNBA. Slight variation above 3.0 suggests instances of additional referee records, possibly due to substitutions or overtime data. The most active referees is defined by the number of appeareances across distinct games. There are 7 referees who have appeared more than 15 times across the 65 games data set (Figure 1).\n\n\nGames with referee data: 65 out of 65 total games (100.0%)\nRecords with referee data: 2,793 (9.9%)\nUnique referees: 27\nAverage referees per game: 3.05\n\n\n\n\n\n\n\n\n\n\n\nMissing Values Analysis\nReferee ID data is missing across most action types. Core gameplay events such as shots, rebounds, substitutions, steals, and blocks have 100% missing referee IDs, which reflects structural design rather than data errors since these actions don’t require official attribution (Table 1). In contrast, fouls (0% missing) and violations (8% missing) consistently record referee IDs, making them reliable categories for analyzing officiating behavior (Table 1).\nTurnovers (56% missing) subtypes shows that missing referee IDs are tied to the nature of the event. There are subtypes like bad passes (100%), lost ball (98.7%), and other unforced errors almost never log a referee, reflecting that these turnovers occur without a whistle.\nIn contrast, whistle-driven subtypes such as offensive fouls, traveling, double dribble, 5-second, 8-second, and inbound violations Referee IDs always recorded (Table 2).Intermediate categories like 3-second violations (17.6%), backcourt (11.1%), shot clock (10.9%), and out-of-bounds (4.5%) have high but not perfect coverage, likely due to inconsistent logging (Table 2). This confirms referee attribution is reliable only for whistle-based turnovers which will be used in this analysis.\n\n\nTable 1: Action Type Breakout\n              total_count  referee_count  percent_missing\nactionType                                               \n2pt                  6022            0.0            100.0\n3pt                  2940            0.0            100.0\nblock                 566            0.0            100.0\nfreethrow            2044            0.0            100.0\ngame                   65            0.0            100.0\njumpball              191            0.0            100.0\nsubstitution         5070            0.0            100.0\nperiod                528            0.0            100.0\nrebound              5416            0.0            100.0\nsteal                 876            0.0            100.0\ntimeout               664            0.0            100.0\nturnover             1631          711.0             56.4\nviolation              87           80.0              8.0\nfoul                 2003         2002.0              0.0\n\n\n\n\n\n\n\n\n\n\nTable 2: Missing Referee ID Values for Turnover Subtypes\n                       total_count  referee_count  percent_missing\nsubType                                                           \nbad pass                       582            0.0            100.0\njumpball violation               2            0.0            100.0\noffensive-kicked-ball            1            0.0            100.0\nlost ball                      305            4.0             98.7\n3-second-violation              17           14.0             17.6\nbackcourt                        9            8.0             11.1\nshot clock                     129          115.0             10.9\nout-of-bounds                  337          322.0              4.5\ntraveling                       96           95.0              1.0\n5-second-violation               2            2.0              0.0\ndouble dribble                   2            2.0              0.0\n8-second-violation               2            2.0              0.0\noffensive foul                 142          142.0              0.0\ninbound                          1            1.0              0.0"
  },
  {
    "objectID": "index.html#feature-engineering",
    "href": "index.html#feature-engineering",
    "title": "Whistle Bias? Investigating Referee Influence on WNBA Home Game Outcomes",
    "section": "Feature Engineering",
    "text": "Feature Engineering\nUsing the original play-by-play data, two additional datasets were constructed:\n\nIndividual Referee–Game Level Dataset\nEach row represents an individual referee’s involvement in a specific game. This dataset includes game-level information (scores, outcome, fouls, competitiveness) alongside referee-specific statistics such as the number of fouls and turnover violations they called, and a breakdown of turnover calls by subtype. This structure enables analysis of individual referee behavior across games. Additionally, referees IDs were mapped to a letter to help with the readability.\nFigure 3 and 4 shows a sorted view of the individual referees’ average difference in foul and whistle turnover call per game between away and home.\nThose who call more fouls or whistle turnovers on the away team are on the left, while least is on the right.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferee Crew–Game Level Dataset\nEach row represents the crew assigned to a particular game. Crews are defined as the set of referees officiating together. This dataset allows for the evaluation of crew-level dynamics such as whether certain combinations of officials are associated with higher foul counts or whistle turnovers. Additionally, referees crews were mapped to the respective individual referee letter to help with the readability.\nFigure 5 and 6 show a sorted view where the referee crews who call more fouls or whistle turnovers on the away team are on the left, while least is on the right."
  },
  {
    "objectID": "index.html#analysis-overview",
    "href": "index.html#analysis-overview",
    "title": "Whistle Bias? Investigating Referee Influence on WNBA Home Game Outcomes",
    "section": "Analysis Overview",
    "text": "Analysis Overview\nThe analysis profiles the individuals referees (Figure 7) and the referee crews (Figure 8) based on their average turn over whistle difference per game and their average foul difference per game. Both metrics take the difference between away and home games. This analysis helps identifies which referees and referee crews that are calling more fouls and / or whistle based turnovers.\nEach graph is broken into quadrants, where the top right indicates more fouls and more turnovers called on away teams (more strict on away) while the bottom left represents fewer falls and turnovers called on the away team (which indiciates more strict on home teams).\n\nIndividual Referee Analysis\nIn Figure 7, most referees are close to the origin which represents neutral to away and home teams.\n\nRef D and Ref V in the top-right quadrant, call more fouls and more whistle-turnovers on away teams (“strict on away”).\nRef O is also right of center with a positive whistle-turnovers difference, suggesting a milder version of that strict pattern.\nRef B in the bottom-right calls more fouls on away but fewer whistle-turnovers (“foul-heavy on away”).\nRef P in far bottom-left calls fewer fouls and fewer whistle-turnovers on away teams (“lenient toward the away”).\n\n\n\n\n\n\n\n\n\n\n\n\nReferee Crew Analysis\nIn Figure 8, most referee crews cluster near the origin which implies little systematic difference between whistles on away vs. home teams.\nTop-right (strict on away):\n\nRef H, Ref K, Ref N and Ref C, Ref M, Ref V call more fouls and more whistle turnovers on away teams.\nRef D, Ref L, Ref N is strongly foul-heavy on away with moderate extra TOs.\n\nTop-left (turnover-heavy on away):\n\nRef G, Ref J, Ref N show fewer fouls but more whistle turnovers on away teams.\n\nBottom area (lenient on away for turnovers):\n\nThere is one extreme crew (Ref C, Ref H, Ref V) has much fewer whistle turnovers on away with near-neutral fouls."
  },
  {
    "objectID": "index.html#choosing-number-of-clusters",
    "href": "index.html#choosing-number-of-clusters",
    "title": "Whistle Bias? Investigating Referee Influence on WNBA Home Game Outcomes",
    "section": "Choosing Number of Clusters",
    "text": "Choosing Number of Clusters\nThe chosen clusters are based on the Calinski-Harabasz (CH) curves for both individual referees and referee crews using the features previously described. The clusters chosen are the following:\n\nIndividual Referee Clusters (k): 6 clusters. In Figure 8, the CH curve jumps sharply from k=2 to k=3 and then flattens, with a modest uptick around k≈6–7. That pattern suggests k=6 is enough separation to reveal structure without fragmenting into tiny cluster.\nReferee Crew Clusterss (k) : 8 clusters. In Figure 9, CH index keeps rising but shows a clear bend near k≈7–8, so 8 was chosen."
  },
  {
    "objectID": "index.html#k-means-results",
    "href": "index.html#k-means-results",
    "title": "Whistle Bias? Investigating Referee Influence on WNBA Home Game Outcomes",
    "section": "K-Means Results",
    "text": "K-Means Results\nTwo K-Means clustering were performed for Individual Referees and the Referee Crew Combinations. The features chosen were the average foul difference and average whistle turnover difference between away and home. PCAs plots were created to understand the variances explained by the features for the two different groups.\nThe first principal component in both plots acts like a “strict-on-away” axis: it increases when both the average foul difference and the whistle turnover difference increase (Away − Home).\nThe second component separates turnover-heavy behavior (higher turnover difference than foul difference) from foul-heavy behavior (the reverse). The 2D projections retain most signal (82% of variance for refs and 75% for crews), so positions are meaningful.\n\nIndividual Referee PCA\nThhe 2D PCA projection in Figure 10 shows PC1 = 50.8% account for variation and PC2 accounted for 31.3% variation with k-means cluster of 6 and moderate silhouette score of 0.376. The PCA shows the referee population separates into six behavior groups defined by the signs and magnitudes of the Away–Home differentials:\n\nCluster 0: Turnover-heavy on away (n = 4; games ≈ 4.0) Turnover differential clearly positive (+0.75), foul differential near zero (+0.08) This indicates a tendency to penalize ball-control violations on away teams more than personal fouls\nCluster 1: Lenient on away, foul-driven (n = 5; games ≈ 2.2) Foul differential is negative (−1.06) and turnover differential ≈ 0 This implies systematically fewer fouls on away teams\nCluster 2: Near-neutral, higher-volume (n = 7; mean games_officiated ≈ 17.7) Small, positive differentials (fouls ≈ +0.42; turnovers ≈ +0.37 per game) This cluster sits closest to the origin in PCA space and accounts for the bulk of exposure.\nCluster 3: Strict on away, foul-driven (n = 3; games ≈ 3.7) Large foul differential (+4.08) with a smaller positive Turnover differential (+0.83) This is the strongest away-side tilt in the sample and primarily carried by fouls\nCluster 4: Lenient on away, turnover-driven (n = 7; games ≈ 5.0) Turnover differential is negative (−0.67) with fouls ≈ 0 (−0.04). This indicates fewer whistle turnovers against away teams.\nCluster 5: Extreme lenient outlier (n = 1; games = 1.0) Very large negatives (fouls ≈ −5.0, turnoverss ≈ −1.0). Given the single referee and minimal exposure. This cluster should be treated as an outlier rather than a stable pattern.\n\nThe PCA space reveals a dominant neutral/moderate cluster with high exposure (cluster 2) and several smaller clusters that exhibit asymmetric tendencies: two “strict-on-away” profiles (turnover-heavy cluster 0; foul-heavy cluster 3) and two “lenient-on-away” profiles (foul-driven cluster 1; turnover-driven cluster 4).\nThe most extreme leniency (cluster 5) reflects a singleton with very low sample size. Overall, the structure supports interpretable, non-pervasive heterogeneity in officiating behavior concentrated in a few, relatively low-volume groups.\n\n\n\n\n\n\n\n\n\nIndividual crew model performance: chosen k: 6,  silhouette: 0.376\n\nTable 3: Referee clusters — feature means and sizes\n   cluster  avg_foul_diff_away_home  avg_turnover_diff_away_home  \\\n0        0                     0.08                         0.75   \n1        1                    -1.06                         0.04   \n2        2                     0.42                         0.37   \n3        3                     4.08                         0.83   \n4        4                    -0.03                        -0.67   \n5        5                    -5.00                        -1.00   \n\n   games_officiated  n  \n0              4.00  4  \n1              2.20  5  \n2             17.71  7  \n3              3.67  3  \n4              5.00  7  \n5              1.00  1  \n\n\n\n\nReferee Crew PCA\nFigure 11 partitions crews into k = 8 clusters (silhouette ≈ 0.44) on the 2D PCA space (PC1 = 46.1% var; PC2 = 29.5% var). The clusters map cleanly to away–home whistle profiles and show greater dispersion on turnover-type calls than on personal fouls.\nStrict on away (foul-led): * Cluster 4 (n=15) fouls difference ≈ +4.87, TO difference ≈ +0.53 * Custer 0 (n=9) balanced strictness fouls difference ≈ +2.56, TO difference ≈ +2.56 * Custer 7 (n=4) very strict fouls difference ≈ +9.00, TO difference ≈ +4.75\nLenient on away: * Cluster 3 (n=12) foul-lenient fouls difference ≈ −3.58, TO difference ≈ +0.17 * Cluster 2 (n=7) mild leniency on both fouls difference ≈ −0.71, TO difference ≈ −0.21 * Cluster 6 (n=1) extreme turnover-lenient fouls difference ≈ −1.00, TO difference ≈ −10.00 (clear outlier)\nMixed profiles: * Cluster 1 (n=7) foul-heavy on away but turnover-lenient fouls difference ≈ +0.43, TO difference ≈ −2.29 * Cluster 5 (n=3) foul-lenient but turnover-heavy on away fouls difference ≈ −4.00, TO difference ≈ +5.33\nThe range in turnover differentials (−10 to +5.3) is wider than that for fouls (−4 to +9). This confirms that crew effects are more pronounced for ball-control/violation calls than for personal fouls. Most crews occupy a near-neutral diagonal ridge in PCA space, while a small number of clusters exhibit marked strict or lenient tendencies, including one extreme turnover-lenient outlier.\n\n\n\n\n\n\n\n\n\nCrew-level model performance: chosen k: 8, silhouette: 0.442\n\nTable 4: Crew clusters — feature means and sizes\n   cluster  avg_foul_diff_per_game  avg_to_diff_per_game  games_officiated   n\n0        0                    2.56                  2.56               1.0   9\n1        1                    0.43                 -2.29               1.0   7\n2        2                   -0.71                 -0.21               2.0   7\n3        3                   -3.58                  0.17               1.0  12\n4        4                    4.87                  0.53               1.0  15\n5        5                   -4.00                  5.33               1.0   3\n6        6                   -1.00                -10.00               1.0   1\n7        7                    9.00                  4.75               1.0   4"
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "Whistle Bias? Investigating Referee Influence on WNBA Home Game Outcomes",
    "section": "Conclusion",
    "text": "Conclusion\nUsing principal component analysis (PCA) of Away–Home whistle differentials and k-means clustering (k = 6 for referees; k = 8 for crews), we find that officiating patterns are concentrated rather than pervasive. The two-dimensional PCA projections capture a meaningful share of variation (≈82% for referees; ≈75% for crews), and the cluster separation is moderate by silhouette score. Both of these support an interpretable structure without overfitting.\nAt the crew level, most crews lie near neutrality, but a small subset occupies a “strict-on-away” region (e.g., fouls +2.6 to +9; turnovers +0.5 to +4.8). These crews exhibit tendencies that could plausibly amplify home-team win probability, although causal claims require confirmatory modeling. The crews can be seperated into four behavioral types: strict on away, foul-heavy on away, turnover-heavy on away, and lenient on away. Dispersion is greater for turnover-whistle differentials than for foul differentials, indicating that crew effects manifest more strongly in ball-control calls (e.g., travels, 3-seconds) than in personal fouls.\nAt the individual-referee level, most officials cluster around zero on both dimensions, but several outliers are evident: two officials (e.g., Ref D, Ref V) display a strict-on-away profile; Ref B is foul-heavy on away; and Ref P is lenient on away. Observed asymmetries are driven by a small set of actors rather than the referee population at large.\nOverall, these findings suggest crew-specific and referee-specific tendencies rather than league-wide bias. Given data limitations (the dataset omits portions of a season and the current season), future work should extend coverage and test these patterns with inferential models (e.g., mixed-effects or hierarchical regressions of home wins and foul/turnover differentials with crew/ref effects and game-context controls) to establish robustness and practical impact."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Whistle Bias? Investigating Referee Influence on WNBA Home Game Outcomes",
    "section": "References",
    "text": "References\n[1] WNBA Play-By-Play Dataset [https://www.kaggle.com/datasets/brains14482/nba-playbyplay-and-shotdetails-data-19962021/data] [2] PCA Break Out [https://www.datacamp.com/tutorial/principal-component-analysis-in-python] [3] K-Means and PCA [https://365datascience.com/tutorials/python-tutorials/pca-k-means/] [4] PCA Features [https://drlee.io/the-ultimate-step-by-step-guide-to-data-mining-with-pca-and-kmeans-83a2bcfdba7d] [5] MatPlot Bar Labeling [https://www.geeksforgeeks.org/python/adding-value-labels-on-a-matplotlib-bar-chart/]"
  },
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "Whistle Bias?",
    "section": "",
    "text": "# For data handling\nimport pandas as pd\nimport numpy as np\n\n# For clustering\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\n\n# For visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.decomposition import PCA"
  },
  {
    "objectID": "proposal.html#dataset",
    "href": "proposal.html#dataset",
    "title": "Whistle Bias?",
    "section": "Dataset",
    "text": "Dataset\nThe dataset required for this project is a granular play-by-play level dataset in order to capture the fouls called within a game with an identifiable referee. The chosen dataset is from Kaggle created by Vladislav Shufinskiy (dataset link) who combined several sources into several datasets for publicly available use. I am choosing to use this source that has been created by another individual due to the granular nature of this project. If I were I collect this data myself, it would require extraneous effort due to limitations on API data requests per game for play-by-play details.\nThe dataset used in this analysis is from the 2022, 2023, 2024 WNBA season that was webscraped from CDN.NBA.COM by Vladislav Shufinskiy. The dataset will use all games available including in-season, playoffs and finals in order to increase sample size for the analysis.\n\n# Import WNBA data from the data folder\nimport os\n\n# Define the data folder path\ndata_folder = \"data\"\n\n# Load individual season data\nwnba_2022 = pd.read_csv(os.path.join(data_folder, \"wnba_2022.csv\"))\nwnba_2023 = pd.read_csv(os.path.join(data_folder, \"wnba_2023.csv\"))\nwnba_2024 = pd.read_csv(os.path.join(data_folder, \"wnba_2024.csv\"))\n\n# Combine all seasons into one dataset\nwnba_data = pd.concat([wnba_2022, wnba_2023, wnba_2024], ignore_index=True)\n\n# Display basic information about the dataset\nprint(f\"Total records across all seasons: {len(wnba_data):,}\")\nprint(f\"Columns in dataset: {wnba_data.shape[1]}\")\nprint(f\"Dataset shape: {wnba_data.shape}\")\n\n# Show first few rows where the officialId is not null\nprint(\"\\nDataset columns:\")\nprint(wnba_data.columns.tolist())\n\nprint(\"\\nExample of the dataset:\")\n# Filter for rows where officialId is not null and show first 5\nofficial_data = wnba_data[wnba_data['officialId'].notnull()]\n\nofficial_data.head(10)\n\nTotal records across all seasons: 28,103\nColumns in dataset: 57\nDataset shape: (28103, 57)\n\nDataset columns:\n['actionNumber', 'clock', 'timeActual', 'period', 'periodType', 'actionType', 'subType', 'qualifiers', 'personId', 'x', 'y', 'possession', 'scoreHome', 'scoreAway', 'edited', 'orderNumber', 'xLegacy', 'yLegacy', 'isFieldGoal', 'side', 'description', 'personIdsFilter', 'teamId', 'teamTricode', 'descriptor', 'jumpBallRecoveredName', 'jumpBallRecoverdPersonId', 'playerName', 'playerNameI', 'jumpBallWonPlayerName', 'jumpBallWonPersonId', 'jumpBallLostPlayerName', 'jumpBallLostPersonId', 'shotDistance', 'shotResult', 'shotActionNumber', 'reboundTotal', 'reboundDefensiveTotal', 'reboundOffensiveTotal', 'pointsTotal', 'assistPlayerNameInitial', 'assistPersonId', 'assistTotal', 'turnoverTotal', 'stealPlayerName', 'stealPersonId', 'officialId', 'foulPersonalTotal', 'foulTechnicalTotal', 'foulDrawnPlayerName', 'foulDrawnPersonId', 'blockPlayerName', 'blockPersonId', 'gameId', 'isTargetScoreLastPeriod', 'area', 'areaDetail']\n\nExample of the dataset:\n\n\n\n\n\n\n\n\n\nactionNumber\nclock\ntimeActual\nperiod\nperiodType\nactionType\nsubType\nqualifiers\npersonId\nx\n...\nfoulPersonalTotal\nfoulTechnicalTotal\nfoulDrawnPlayerName\nfoulDrawnPersonId\nblockPlayerName\nblockPersonId\ngameId\nisTargetScoreLastPeriod\narea\nareaDetail\n\n\n\n\n38\n50\nPT05M11.00S\n2022-08-18T02:15:47Z\n1\nREGULAR\nfoul\npersonal\nNaN\n1628287\nNaN\n...\n1.0\n0.0\nWilson\n1628932.0\nNaN\nNaN\n1042200101\nNaN\nNaN\nNaN\n\n\n46\n60\nPT04M38.00S\n2022-08-18T02:16:46.900Z\n1\nREGULAR\nturnover\nout-of-bounds\nNaN\n1628276\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1042200101\nNaN\nNaN\nNaN\n\n\n56\n68\nPT03M58.00S\n2022-08-18T02:20:32.100Z\n1\nREGULAR\nfoul\npersonal\nNaN\n1629498\nNaN\n...\n1.0\n0.0\nCunningham\n1629482.0\nNaN\nNaN\n1042200101\nNaN\nNaN\nNaN\n\n\n68\n85\nPT02M23.00S\n2022-08-18T02:22:29.500Z\n1\nREGULAR\nfoul\npersonal\n2freethrow\n1629488\nNaN\n...\n1.0\n0.0\nWilson\n1628932.0\nNaN\nNaN\n1042200101\nNaN\nNaN\nNaN\n\n\n77\n95\nPT01M59.00S\n2022-08-18T02:23:44Z\n1\nREGULAR\nfoul\npersonal\nNaN\n1629482\nNaN\n...\n1.0\n0.0\nWilson\n1628932.0\nNaN\nNaN\n1042200101\nNaN\nNaN\nNaN\n\n\n90\n117\nPT00M09.40S\n2022-08-18T02:26:14.700Z\n1\nREGULAR\nfoul\npersonal\ninpenalty, 2freethrow\n1629484\nNaN\n...\n1.0\n0.0\nWilson\n1628932.0\nNaN\nNaN\n1042200101\nNaN\nNaN\nNaN\n\n\n113\n148\nPT08M39.00S\n2022-08-18T02:32:02.900Z\n2\nREGULAR\nfoul\npersonal\nNaN\n203833\nNaN\n...\n1.0\n0.0\nGray\n204334.0\nNaN\nNaN\n1042200101\nNaN\nNaN\nNaN\n\n\n116\n153\nPT08M31.00S\n2022-08-18T02:32:47.900Z\n2\nREGULAR\nturnover\nout-of-bounds\nNaN\n203833\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1042200101\nNaN\nNaN\nNaN\n\n\n120\n157\nPT08M01.00S\n2022-08-18T02:33:33.400Z\n2\nREGULAR\nfoul\noffensive\nNaN\n1630387\nNaN\n...\n1.0\n0.0\nPeddy\n203035.0\nNaN\nNaN\n1042200101\nNaN\nNaN\nNaN\n\n\n121\n159\nPT08M01.00S\n2022-08-18T02:33:33.400Z\n2\nREGULAR\nturnover\noffensive foul\nNaN\n1630387\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1042200101\nNaN\nNaN\nNaN\n\n\n\n\n10 rows × 57 columns"
  },
  {
    "objectID": "proposal.html#research-questions",
    "href": "proposal.html#research-questions",
    "title": "Whistle Bias?",
    "section": "Research Questions",
    "text": "Research Questions\nThe research questions guiding this project are designed to uncover latent patterns in officiating behavior within the WNBA using unsupervised data mining techniques. Rather than testing predefined hypotheses, the goal is to explore underlying structures and trends in referee decision-making that may indicate systemic tendencies or inconsistencies.\n\n1. Do home teams have significantly higher win rates under specific referee crews?\nThis question aims to identify clusters of referee crews associated with elevated home team win rates. The project will explore whether specific officiating crews are consistently linked to favorable home outcomes. Patterns that emerge may reflect officiating tendencies that unintentionally reinforce home-court advantage.\n\n\n2. When games are officiated by certain referee combinations, do they have higher or lower foul disparity?\nThis question focuses on foul differential as a key indicator of officiating style. The analysis seeks to reveal groups of crews with similar behavioral patterns. Identifying outliers or consistently imbalanced combinations may point to structural officiating trends.\n\n\n3. Do certain referees call more fouls on away teams?\nThis question narrows the scope to individual referees to examine whether certain officials consistently contribute to foul imbalances. The objective is to detect underlying officiating bias and identify individuals whose patterns deviate significantly from the normal."
  },
  {
    "objectID": "proposal.html#analysis-plan",
    "href": "proposal.html#analysis-plan",
    "title": "Whistle Bias?",
    "section": "Analysis plan",
    "text": "Analysis plan\n\nProblem Introduction\nThe Women’s National Basketball Association (WNBA) has experienced significant growth in recent years, accompanied by an increasing emphasis on data analytics to enhance forecasting and anomaly detection capabilities. This project seeks to evaluate the fairness of officiating in the WNBA by applying machine learning techniques to referee assignment data, foul differentials, and game outcomes. The primary objective is to identify potential officiating bias and assess the extent to which individual referees may contribute to a home-court advantage.\n\n\nProblem Formulation\nThis study will examine potential officiating bias in WNBA games by analyzing referee assignment data, foul differentials, and game outcomes across multiple seasons. The analysis will proceed in the following stages:\n\n1. Data Collection and Preprocessing\n\nData Sources: Collecting data from https://www.kaggle.com/datasets/brains14482/nba-playbyplay-and-shotdetails-data-19962021/data which is a play-by-play datasets with referee assignments.\nVariables of Interest:\n\nGame metadata: date, teams, location (home/away), final scores\nReferee assignments (names or IDs, crew combinations)\nTeam foul counts\nGame outcomes (win/loss, point differential)\n\nData Cleaning:\n\nNormalize referee names across games\nMerge datasets to associate referee crews with game-level statistics\nHandle missing or inconsistent values\n\n\n\n\n2. Exploratory Data Analysis\nTo validate that the data supports our research questions, key features were explored using distributions and summary statistics:\n\nSummarize foul counts by team and referee to understand Foul Differential Distribution.\nVisualize average foul differential by referee and referee crew to see if there is skewness which could suggest certain crews favor one side.\nCompute home vs. away win rates across different referee combinations Crews with consistently higher home win rates may indicate officiating bias regardless of foul disparities.\nGenerate pairwise correlations to identify potentially relevant feature groupings. Specific investigation will look at whether foul differential has a meaningful impact on scoring.\n\n\n\n3. Feature Engineering\nThe goal is to construct a comprehensive set of quantitative features that can characterize officiating tendencies and enable meaningful clustering. Below are several features that I plan to create:\n\nFoul Differential: The difference in total fouls called on the home team versus the away team. This feature serves as a proxy for imbalance in foul calls and is a central indicator of potential bias.\nTotal Fouls Per Game:\nThe sum of fouls called on both teams, capturing referees’ strictness or leniency in foul calling. Calculated as fouls called on the away team minus fouls called on the home team.\nAverage Fouls Per Team:\nComputed as total fouls divided by the number of games officiated by a referee or crew. This helps normalize foul volume across varying sample sizes.\nFree Throw Differential:\nThe difference in free throw attempts between the home and away teams, which may reflect the practical consequences of foul calls.\nHome Win Indicator:\nA binary variable denoting whether the home team won the game (1 = home team won, 0 = home team loss). Used to explore relationships between crew assignments and home-court advantage.\nReferee and Crew Identifiers:\nEncoded categorical identifiers for individual referees and three-person crew combinations to enable grouping and aggregation across games. Referee names will be normalized and mapped to a consistent ID to support aggregation. A composite key will be created for the three referees per game to analyze group effects.\nNormalization and Scaling:\nTo prepare for K-means clustering, all continuous features will be standardized (e.g., z-score normalization) to ensure that variables are on the same scale and contribute equally to distance calculations in the clustering algorithm\nAggregation Strategy:\nReferee-level features will be aggregated across games to create a per-referee profile. Similarly, crew-level statistics will be generated by grouping games officiated by the same three-referee combinations. This aggregation supports both individual and crew-based cluster analysis.\n\n\n\n4. Unsupervised Learning (Pattern Discovery)\n\nK-Means Clustering: Use K-means clustering to group:\n\nReferee crew based on game-level foul and outcome patterns\nIndividual referees based on their aggregated officiating behavior across multiple games\n\nDimensionality Reduction: Apply Principal Component Analysis (PCA) to identify latent components in officiating behavior (such as home bias, foul volume, crew consistency)\n\n\n\n5. Cluster Interpretation\n\nAnalyze each cluster’s centroid to identify distinguishing features (such as high foul disparity, frequent home wins)\nLabel clusters based on behavioral tendencies (such as “neutral crews”, “home-favoring referees”, “high-caller crews”)\nIdentify any outlier referees or crews with extreme values\n\n\n\n6. Reporting and Visualization\n\nCreate visualizations including heatmaps, bar charts, and PCA plot to articulate findings\n\nPlot clustered referee data to visualize separation and cohesion\n\nDiscuss implications of findings in the context of WNBA officiating policy and fairness\nProvide future recommendations to improve the analysis"
  },
  {
    "objectID": "proposal.html#plan-of-attack",
    "href": "proposal.html#plan-of-attack",
    "title": "Whistle Bias?",
    "section": "Plan of Attack",
    "text": "Plan of Attack\n\n\n\n\n\n\n\n\nMilestone\nTask\nDue Date\n\n\n\n\nSubmit Proposal\nFinalize and submit initial proposal for others to provide feedback\n8/3/2025\n\n\nRevise Proposal\nAddress all peer feedback as needed\n8/6/2025\n\n\nSubmit Revised Proposal\nIncorporate and address all feedback for instructor review\n8/8/2025\n\n\nData Collection & Cleaning\n- Gather and clean WNBA game logs, referee assignments, and team stats  - Merge datasets and ensure consistent formatting\n8/10/2025\n\n\nFeature Engineering & EDA\n- Create variables such as foul differential, crew IDs, and home/away indicators  - Visualize trends and explore feature distributions\n8/12/2025\n\n\nPattern Discovery with K-means\n- Standardize features and apply K-means clustering\n8/14/2025\n\n\nCluster Interpretation\n- Interpret each cluster’s characteristics (e.g., home bias, foul disparity)  - Identify and analyze outlier referees or crews\n8/16/2025\n\n\nVisual & Storytelling\nCreate and finalize visuals that showcase the clustering results, such as PCA plots and cluster heatmaps\n8/17/2025\n\n\nFinal Write-Up & Presentation\n- Create, refine, and finalize the report, code, and presentation  - Ensure all results are well-documented and reproducible\n8/19/2025\n\n\nFinal Submission\n- Submit final report, code, and presentation  - Back up to GitHub (or drive)\n8/20/2025\n\n\n\n\nRepo Organization\n\n\n\n\n\n\n\nPath / File\nDescription\n\n\n\n\n.github/\nContains GitHub-specific files, including workflows, actions, and issue management templates.\n\n\n_extra/\nStores miscellaneous files that do not fit into other project categories; serves as a repository for supplementary documents.\n\n\n_freeze/\nHouses frozen environment files detailing the project’s setup and dependencies.\n\n\ndata/\nDirectory for all essential data files, including input datasets and resources required for analysis.\n\n\nimages/\nCentral repository for visual assets such as diagrams, charts, and screenshots used for documentation and presentations.\n\n\n.gitignore\nSpecifies files and directories to exclude from Git version control.\n\n\nREADME.md\nCentral documentation file providing project overview, setup instructions, and usage guidelines.\n\n\n_quarto.yml\nConfiguration file for Quarto, specifying rendering options and document settings.\n\n\nabout.qmd\nProvides contextual information about the project and introduces team members and their roles.\n\n\nindex.qmd\nMain page of the project write-up, including code, visualizations, and final results.\n\n\npresentation.qmd\nQuarto file used to create a slideshow of the final project presentation.\n\n\nproject-final.Rproj\nRStudio project file that defines project-level settings for R-based workflows.\n\n\nproposal.qmd\nContains the project proposal, including dataset descriptions, metadata, research questions, and a weekly progress plan.\n\n\nrequirements.txt\nLists required Python packages and versions necessary for reproducing the project environment.\n\n\n\n\n\nReferences\n[1] WNBA Dataset: https://www.kaggle.com/datasets/brains14482/nba-playbyplay-and-shotdetails-data-19962021/data used in the project"
  }
]